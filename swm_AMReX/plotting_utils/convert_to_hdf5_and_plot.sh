#!/bin/bash

# This script is used to convert all AMReX plotfiles in a specified directory to HDF5 format
# and then plot the hdf5 files using matplotlib. The script will also create an MP4 movie from the
# PNG files created by the plotting script.

# Prerequisites:
#    SWM_AMREX_ROOT = the directory containing the AMReX version of the SWM mini-app.
#    HDF5_HOME = the directory where you installed HDF5. Only need if you are running with the "hdf5" solution verification method.

set -u
set -e
#set -x

###############################################################################
# Command Line Input
###############################################################################
# Input directory argument must be provided
if [ -z "$1" ]; then
    echo "Usage: $0 <directory with amrex plotfiles of the form plt_*>"
    exit 1
fi

# Set the directory to the provided argument
input_directory="$1"

# Remove trailing slash from input_directory if it exists... so the pattern in the for loop below works
input_directory="${input_directory%/}"

###############################################################################
# Setup
###############################################################################

# Source common functions
source "$SWM_AMREX_ROOT"/common_functions.sh

###############################################################################
# Build Plotfile to HDF5 Conversion Executable
###############################################################################

print_banner "Build Plotfile to HDF5 Conversion Executable"

plotting_utils_dir="${SWM_AMREX_ROOT}"/plotting_utils

cd "${plotting_utils_dir}"

# Run make and capture the output
make_output=$(mktemp) # Create a temporary file to store the output of make
make | tee "$make_output"

# Parse the output to find the executable name
plotfile_2_hdf5_exe_base=$(grep "executable is" "$make_output" | awk '{print $3}')
rm "$make_output" # Remove the temporary file used to store the output of make

plotfile_2_hdf5_exe="${plotting_utils_dir}/${plotfile_2_hdf5_exe_base}"

## Call the function and get the path to the executable
#plotfile_2_hdf5_exe=$(build_plotfile_to_hdf5_exe)

# Make sure that plotfile_2_hdf5_exe is an executable
if [ ! -x "$plotfile_2_hdf5_exe" ]; then
    echo "Error: $plotfile_2_hdf5_exe is not an executable file."
    exit 1
fi

###############################################################################
# Get list of AMReX Plotfiles to convert to HDF5
###############################################################################

print_banner "Get list of AMReX plotfiles to convert to HDF5"

# Initialize an array to store the plt filenames that we are going to convert to HDF5
plt_files_to_convert=()

# Loop over all files that start with plt_ followed by a series of numbers in the specified directory
for plt_file in "$input_directory"/plt[0-9]*; do

    # Skip files that contain .old or .h5
    if [[ "$plt_file" == *".old"* || "$plt_file" == *".h5"* ]]; then
        continue
    fi

    # Plotfiles generated by AMReX are actually directories. Check that plt_file is a directory.
    if [[ -d "$plt_file" ]]; then
        plt_files_to_convert+=("$plt_file")

        echo "Found plotfile: $plt_file"
    fi

done

# Make sure that plt_files_to_convert array is not empty
if [ ${#plt_files_to_convert[@]} -eq 0 ]; then
    echo "Error: No plotfiles found to convert in the directory $input_directory."
    exit 1
fi

###############################################################################
# Convert AMReX Plotfiles to HDF5 files
###############################################################################

print_banner "Convert AMReX Plotfiles to HDF5 files"

# The directory where the HDF5 files will be saved... just use the same directory that contains the plotfiles
hdf5_output_dir="$input_directory"

# Initialize an array to store the HDF5 filenames
hdf5_files=()

# Loop over all files that start with plt_ followed by a series of numbers in the specified directory
for plt_file in "${plt_files_to_convert[@]}"; do

    # Set the outfile name to the same as plt_file but with .h5 extension
    hdf5_file="${hdf5_output_dir}/$(basename "${plt_file}").h5"

    echo "Converting plotfile $plt_file to HDF5 file $hdf5_file"
    
    "${plotfile_2_hdf5_exe}" infile="$plt_file" outfile="$hdf5_file"

    echo ""
        
    # Add the HDF5 filename to the array
    hdf5_files+=("$hdf5_file")

done

##############################################################################
# Loop over each HDF5 files and plot. Creates a series of PNG files.
##############################################################################
print_banner "Plotting HDF5 files"

# The directory where the png files will be saved... just use the same directory that contains the plotfiles
png_output_dir="$input_directory"

for hdf5_file in "${hdf5_files[@]}"; do
    echo "Plotting HDF5 file with python: $hdf5_file"
    python "$SWM_AMREX_ROOT"/plotting_utils/plot_hdf5.py "$hdf5_file" --output_dir "$png_output_dir"
    echo ""
done

##############################################################################
# Create MP4 Movie from PNG Files
##############################################################################
print_banner "Creating MP4 Movies"

# Ensure ffmpeg is available
if ! command -v ffmpeg &> /dev/null
then
    echo "ffmpeg could not be found, please install it or add it to your path to create the MP4 movies."
    exit 1
fi

# The directory where the mp4 files will be saved... just use the same directory that contains the plotfiles
mp4_output_dir="$input_directory"

# Create the MP4 movie from PNG files
# Assumes the PNG files are named something like u_00000.png, v_00000.png, and p_00000.png and so on
for prefix in u v p; do
    ffmpeg -y -framerate 4 -pattern_type glob -i "${png_output_dir}/${prefix}_*.png" -c:v libx264 -pix_fmt yuv420p "${mp4_output_dir}/${prefix}.mp4"
done
